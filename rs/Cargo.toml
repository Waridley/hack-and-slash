[package]
name = "sond-has"
version = "0.1.0"
edition = "2021"
license = "EUPL-1.2"
default-run = "sond-has"
rust-version = "1.83" # f32 const operations

[workspace]
resolver = "2"
members = [
#    "tools/*",
    "game-dylib",
    "engine",
    "engine-dylib",
    "engine/macros",
]

[features]
dylib = ["bevy_dylib", "engine/bevy_dylib", "sond-has-engine-dylib"]
# TODO: This might be able to be replaced by debug_assertions now that the feature "dev_ui" exists
debugging = ["engine/debugging"]
# TODO: Should dev_ui actually force debugging?
dev_ui = ["debugging", "engine/dev_ui", "bevy-inspector-egui", "egui_plot"]
vis_test = ["testing", "render", "engine/vis_test", "dev_ui"]
testing = ["engine/testing", "debugging"]
render = ["engine/render"]
import_assets = ["bevy/asset_processor"]
default = [
    "render",
    "bevy_kira_audio",
]

[workspace.dependencies.bevy]
version = "0.15.3"
default-features = false
features = [
#    "asset_processor", # only on desktop
    "animation",
    "bevy_asset",
#    "bevy_audio", # using kira
    "bevy_gilrs",
    "bevy_scene",
#    "bevy_winit", # not in CI
#    "bevy_core_pipeline", # only with "render"
    "bevy_pbr",
    "bevy_gltf",
#    "bevy_render", # not in CI
#    "bevy_sprite",
#    "bevy_text",
#    "bevy_ui", # Will be making my own game UI
    "multi_threaded",
    "png",
    "hdr",
    "ktx2",
    "zstd",
#    "vorbis", # using kira
    "x11",
#    "file_watcher", # only for development
    "bevy_gizmos",
#    "android_shared_stdcxx", # currently not building for android, and this breaks macOS cross-check
    "tonemapping_luts",
#    "default_font", # For editor, but probably not in-game
    "webgl2", # Needed so it doesn't default to WebGPU
    "bevy_state",
    "bevy_window",
]

[workspace.dependencies.bevy_asset]
features = ["multi_threaded"]

[workspace.dependencies]
# Mine
engine = { package = "sond-has-engine", path = "engine" }
enum_components = { package = "sond-bevy-enum-components", path = "../sond-bevy-enum-components" }
particles = { package = "sond-bevy-particles", path = "../sond-bevy-particles" }
macros = { package = "sond-has-macros", path = "engine/macros" }

# Engine
accesskit = "0.17.1"
bevy_dylib = "0.15.3"
bevy_mesh = "0.15.3"
bevy_rapier3d = { version = "0.28.0", default-features = false, features = ["dim3"] }
rapier3d = { version = "0.22.0", features = ["wasm-bindgen", "serde-serialize"] }
bevy_kira_audio = "0.21.0"
leafwing-input-manager = { git = "https://github.com/Leafwing-Studios/leafwing-input-manager.git", version = "0.16.0", features = ["timing"] }
bevy_quickmenu = "0.2.0"
bevy_common_assets = { version = "0.10.0", features = ["ron"] }

# Util
ab_glyph = "0.2.26"
array-init = "2.1.0"
atomicow = "1.0.0"
base64 = "0.21.7"
bevy_pkv = "0.12.0" # settings
bevy_svg = { version = "0.13.0", path = "../vend/bevy_svg" }
bimap = "0.6.3"
blake3 = "1.6.1" # already in upstream deps, decent performance despite good security, only used at startup anyway
bytemuck = "1.14.1" # mostly for seeds
crossbeam = "0.8.2"
dyn-clone = "1.0.17"
fixedbitset = "0.4.2" # navigation graph edge storage
futures-lite = "2.1.0" # especially for `yield_now()`
itertools = "0.13.0"
lyon_tessellation = "1.0.15"
meshtext = { version = "0.3.0", features = ["owned"] }
nanorand = { version = "0.7.0", default-features = false, features = ["std", "wyrand", "getrandom"] } # wasm is broken without std and getrandom
noise = "0.9.0"
num-traits = "0.2.17"
ordered-float = "4.2.0"
rand = "0.8.5"
rand_chacha = "0.3.1" # already in upstream deps, decent performance despite good security, only used at startup anyway
ron = "0.8.1"
static_assertions = "1.1.0"
serde = "1"
smallvec = "*" # same as bevy
smol_str = "0.2.1"
tiny_bail = "0.4.3"
web-time = "1.0.0"

# Debugging/Editor
bevy-inspector-egui = {  version = "0.29.1", default-features = false }
egui_plot = "0.30.0"

# Testing
linkme = "0.3.22"

[dependencies]
# Mine
engine = { workspace = true }
enum_components = { workspace = true }
particles = { workspace = true }

# Engine
bevy = { workspace = true }
bevy_rapier3d = { workspace = true }
rapier3d = { workspace = true }
bevy_kira_audio = { workspace = true, optional = true } # Not for CI cross-compile
leafwing-input-manager = { workspace = true }

# Util
bevy_pkv = { workspace = true }
nanorand = { workspace = true }
rand = { workspace = true, features = ["small_rng"] }
serde = { workspace = true }
smallvec = { workspace = true }
tiny_bail = { workspace = true }
web-time = { workspace = true }

# Debugging
bevy-inspector-egui = { workspace = true, optional = true, features = ["bevy_pbr", "bevy_render", "egui_open_url"] }
egui_plot = { workspace = true, optional = true }

[target.'cfg(not(target_arch="wasm32"))'.dependencies]
bevy_dylib = { workspace = true, optional = true }
sond-has-engine-dylib = { path = "engine-dylib", optional = true }

[profile.dev]
opt-level = 1

[profile.dev.package."*"]
opt-level = 3

[profile.release]
opt-level = "z"
lto = "thin"
strip = true

# Helps prevent full rebuild when switching between deskop and WASM due to rustflags
[profile.desktop]
inherits = "dev"
split-debuginfo = "packed"

[profile.desktop-release]
inherits = "release"
opt-level = 3
lto = true
codegen-units = 1
strip = true

[profile.desktop-release-debug]
inherits = "release"
opt-level = 3
lto = true
codegen-units = 1
debug = true
split-debuginfo = "packed"

# Prevents full rebuild just for profiling when enabling and disabling `bevy/trace_tracy`
[profile.profiling]
inherits = "desktop-release"

# In case debugger/backtrace is skipping too much
[profile.no-opt]
inherits = "dev"
opt-level = 0
package."*".opt-level = 0

[lints.clippy]
needless_update = "allow" # `..default()` used a lot to allow quick adding/removing of fields
too_many_arguments = "allow" # Systems often need lots of arguments
type_complexity = "allow" # Queries seem complex to Clippy but are usually easily read
