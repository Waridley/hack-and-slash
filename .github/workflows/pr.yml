name: PR

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

env:
  CARGO_TERM_COLOR: always

jobs:
  pr_checks:
    name: pr_${{ matrix.job }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job: [build, test_engine, test_game, clippy]
        include:
          - job: build
            features: "testing,import_assets"
            command: "cargo build"
          - job: test_engine
            features: "testing"
            command: "cargo test --package sond-has-engine --no-default-features"
          - job: test_game
            features: "testing,import_assets"
            command: "cargo test --package sond-has --no-default-features"
          - job: clippy
            features: ""
            command: "cargo clippy --workspace --all-targets --all-features -- -Dwarnings"

    steps:
      - name: Checkout repo and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # TODO: make an image with these already installed, or use an existing one
      - name: Install alsa and udev
        run: sudo apt-get update; sudo apt-get install -y --no-install-recommends libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./rs/target/
          key: ${{ runner.os }}-cargo-ci-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust beta
        uses: dtolnay/rust-toolchain@beta
        with:
          targets:
            wasm32-unknown-unknown,
            x86_64-pc-windows-gnu,
            x86_64-apple-darwin,
            aarch64-linux-android,
            aarch64-apple-ios,
          components: rustfmt, clippy

      # TODO: Maybe just use nightly
      - name: Prepare crate for beta toolchain
        run: |
          rm ./rs/.cargo/config.toml
          rm ./rs/rust-toolchain.toml

      - name: Run ${{ matrix.job }}
        working-directory: ./rs
        run: ${{ matrix.command }} ${{ (matrix.features != '') && format('--features={0}', matrix.features) || ''}}
